// Similar to built-in `map-get` but allows "deep get" (deeper keys as next parameters)
// and warns if the key is not found
@function get-map-value($map, $keys...) {
    @each $key in $keys {
        $isValidKey: map-has-key($map, $key);

        @if ($isValidKey == false) {
            @warn "There is no element with key: '#{$key}'.";

            @return null;
        }

        $map: map-get($map, $key);
    }

    @return $map;
}

// Similar to `get-map-value` but falls back to smaller BP if there's no key found in map for given BP
@function get-bp-value($map, $bp) {
    $index: index(map-keys($breakpoints), $bp);

    @if $index == null or $index <= 0 {
        @return null;
    }

    $hasKey: map-has-key($map, $bp);

    @if ($hasKey == false) {
        @return get-bp-value($map, nth(map-keys($breakpoints), $index - 1));
    }

    @return map-get($map, $bp);
}

@function breakpoint($key) {
    @return get-map-value($breakpoints, $key) * 1px;
}

@mixin media($minWidth, $maxWidth: null) {
    @if type-of($minWidth) != number {
        $minWidth: breakpoint($minWidth);
    }

    @if ($minWidth != null) {
        @if ($maxWidth != null) {
            @if type-of($maxWidth) != number {
                $maxWidth: breakpoint($maxWidth);
            }

            @media (min-width: $minWidth) and (max-width: $maxWidth - 1px) {
                @content;
            }
        } @else {
            @if ($minWidth != 0) {
                @media (min-width: $minWidth) {
                    @content;
                }
            } @else {
                @content;
            }
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from '#{$minWidth}'." + " Please make sure it is defined in `$breakpoints` map.";
    }
}

@mixin each-breakpoint($map, $properties) {
    @each $bp, $value in $map {
        @include media($bp) {
            @each $property in $properties {
                #{$property}: $value;
            }
        }
    }
}

@function z-index($key) {
    @return get-map-value($z-index, $key);
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @return if(
        $index,
        str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
        $string
    );
}

@function svg-url($svg) {
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }

    $encoded: '';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);

        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml,#{$encoded}");
}
